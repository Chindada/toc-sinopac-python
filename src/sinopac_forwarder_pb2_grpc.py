# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import sinopac_forwarder_pb2 as sinopac__forwarder__pb2


class SinopacForwarderStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Heartbeat = channel.stream_stream(
                '/sinopac_forwarder.SinopacForwarder/Heartbeat',
                request_serializer=sinopac__forwarder__pb2.Beat.SerializeToString,
                response_deserializer=sinopac__forwarder__pb2.Beat.FromString,
                )
        self.GetAllStockDetail = channel.unary_unary(
                '/sinopac_forwarder.SinopacForwarder/GetAllStockDetail',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=sinopac__forwarder__pb2.StockDetailResponse.FromString,
                )
        self.GetAllStockSnapshot = channel.unary_unary(
                '/sinopac_forwarder.SinopacForwarder/GetAllStockSnapshot',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=sinopac__forwarder__pb2.StockSnapshotResponse.FromString,
                )
        self.GetStockSnapshotByNumArr = channel.unary_unary(
                '/sinopac_forwarder.SinopacForwarder/GetStockSnapshotByNumArr',
                request_serializer=sinopac__forwarder__pb2.StockNumArr.SerializeToString,
                response_deserializer=sinopac__forwarder__pb2.StockSnapshotResponse.FromString,
                )
        self.GetStockSnapshotTSE = channel.unary_unary(
                '/sinopac_forwarder.SinopacForwarder/GetStockSnapshotTSE',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=sinopac__forwarder__pb2.StockSnapshotResponse.FromString,
                )
        self.GetStockHistoryTick = channel.unary_unary(
                '/sinopac_forwarder.SinopacForwarder/GetStockHistoryTick',
                request_serializer=sinopac__forwarder__pb2.StockNumArrWithDate.SerializeToString,
                response_deserializer=sinopac__forwarder__pb2.StockHistoryTickResponse.FromString,
                )
        self.GetStockHistoryKbar = channel.unary_unary(
                '/sinopac_forwarder.SinopacForwarder/GetStockHistoryKbar',
                request_serializer=sinopac__forwarder__pb2.StockNumArrWithDate.SerializeToString,
                response_deserializer=sinopac__forwarder__pb2.StockHistoryKbarResponse.FromString,
                )
        self.GetStockHistoryClose = channel.unary_unary(
                '/sinopac_forwarder.SinopacForwarder/GetStockHistoryClose',
                request_serializer=sinopac__forwarder__pb2.StockNumArrWithDate.SerializeToString,
                response_deserializer=sinopac__forwarder__pb2.StockHistoryCloseResponse.FromString,
                )
        self.GetStockHistoryCloseByDateArr = channel.unary_unary(
                '/sinopac_forwarder.SinopacForwarder/GetStockHistoryCloseByDateArr',
                request_serializer=sinopac__forwarder__pb2.StockNumArrWithDateArr.SerializeToString,
                response_deserializer=sinopac__forwarder__pb2.StockHistoryCloseResponse.FromString,
                )
        self.GetStockTSEHistoryTick = channel.unary_unary(
                '/sinopac_forwarder.SinopacForwarder/GetStockTSEHistoryTick',
                request_serializer=sinopac__forwarder__pb2.Date.SerializeToString,
                response_deserializer=sinopac__forwarder__pb2.StockHistoryTickResponse.FromString,
                )
        self.GetStockTSEHistoryKbar = channel.unary_unary(
                '/sinopac_forwarder.SinopacForwarder/GetStockTSEHistoryKbar',
                request_serializer=sinopac__forwarder__pb2.Date.SerializeToString,
                response_deserializer=sinopac__forwarder__pb2.StockHistoryKbarResponse.FromString,
                )
        self.GetStockTSEHistoryClose = channel.unary_unary(
                '/sinopac_forwarder.SinopacForwarder/GetStockTSEHistoryClose',
                request_serializer=sinopac__forwarder__pb2.Date.SerializeToString,
                response_deserializer=sinopac__forwarder__pb2.StockHistoryCloseResponse.FromString,
                )
        self.GetStockVolumeRank = channel.unary_unary(
                '/sinopac_forwarder.SinopacForwarder/GetStockVolumeRank',
                request_serializer=sinopac__forwarder__pb2.VolumeRankRequest.SerializeToString,
                response_deserializer=sinopac__forwarder__pb2.StockVolumeRankResponse.FromString,
                )
        self.SubscribeStockTick = channel.unary_unary(
                '/sinopac_forwarder.SinopacForwarder/SubscribeStockTick',
                request_serializer=sinopac__forwarder__pb2.StockNumArr.SerializeToString,
                response_deserializer=sinopac__forwarder__pb2.SubscribeResponse.FromString,
                )
        self.UnSubscribeStockTick = channel.unary_unary(
                '/sinopac_forwarder.SinopacForwarder/UnSubscribeStockTick',
                request_serializer=sinopac__forwarder__pb2.StockNumArr.SerializeToString,
                response_deserializer=sinopac__forwarder__pb2.SubscribeResponse.FromString,
                )
        self.UnSubscribeStockAllTick = channel.unary_unary(
                '/sinopac_forwarder.SinopacForwarder/UnSubscribeStockAllTick',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=sinopac__forwarder__pb2.FunctionErr.FromString,
                )
        self.SubscribeStockBidAsk = channel.unary_unary(
                '/sinopac_forwarder.SinopacForwarder/SubscribeStockBidAsk',
                request_serializer=sinopac__forwarder__pb2.StockNumArr.SerializeToString,
                response_deserializer=sinopac__forwarder__pb2.SubscribeResponse.FromString,
                )
        self.UnSubscribeStockBidAsk = channel.unary_unary(
                '/sinopac_forwarder.SinopacForwarder/UnSubscribeStockBidAsk',
                request_serializer=sinopac__forwarder__pb2.StockNumArr.SerializeToString,
                response_deserializer=sinopac__forwarder__pb2.SubscribeResponse.FromString,
                )
        self.UnSubscribeStockAllBidAsk = channel.unary_unary(
                '/sinopac_forwarder.SinopacForwarder/UnSubscribeStockAllBidAsk',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=sinopac__forwarder__pb2.FunctionErr.FromString,
                )


class SinopacForwarderServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Heartbeat(self, request_iterator, context):
        """Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllStockDetail(self, request, context):
        """Basic
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllStockSnapshot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStockSnapshotByNumArr(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStockSnapshotTSE(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStockHistoryTick(self, request, context):
        """History
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStockHistoryKbar(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStockHistoryClose(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStockHistoryCloseByDateArr(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStockTSEHistoryTick(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStockTSEHistoryKbar(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStockTSEHistoryClose(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStockVolumeRank(self, request, context):
        """Target
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeStockTick(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnSubscribeStockTick(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnSubscribeStockAllTick(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeStockBidAsk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnSubscribeStockBidAsk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnSubscribeStockAllBidAsk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SinopacForwarderServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Heartbeat': grpc.stream_stream_rpc_method_handler(
                    servicer.Heartbeat,
                    request_deserializer=sinopac__forwarder__pb2.Beat.FromString,
                    response_serializer=sinopac__forwarder__pb2.Beat.SerializeToString,
            ),
            'GetAllStockDetail': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllStockDetail,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=sinopac__forwarder__pb2.StockDetailResponse.SerializeToString,
            ),
            'GetAllStockSnapshot': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllStockSnapshot,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=sinopac__forwarder__pb2.StockSnapshotResponse.SerializeToString,
            ),
            'GetStockSnapshotByNumArr': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStockSnapshotByNumArr,
                    request_deserializer=sinopac__forwarder__pb2.StockNumArr.FromString,
                    response_serializer=sinopac__forwarder__pb2.StockSnapshotResponse.SerializeToString,
            ),
            'GetStockSnapshotTSE': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStockSnapshotTSE,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=sinopac__forwarder__pb2.StockSnapshotResponse.SerializeToString,
            ),
            'GetStockHistoryTick': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStockHistoryTick,
                    request_deserializer=sinopac__forwarder__pb2.StockNumArrWithDate.FromString,
                    response_serializer=sinopac__forwarder__pb2.StockHistoryTickResponse.SerializeToString,
            ),
            'GetStockHistoryKbar': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStockHistoryKbar,
                    request_deserializer=sinopac__forwarder__pb2.StockNumArrWithDate.FromString,
                    response_serializer=sinopac__forwarder__pb2.StockHistoryKbarResponse.SerializeToString,
            ),
            'GetStockHistoryClose': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStockHistoryClose,
                    request_deserializer=sinopac__forwarder__pb2.StockNumArrWithDate.FromString,
                    response_serializer=sinopac__forwarder__pb2.StockHistoryCloseResponse.SerializeToString,
            ),
            'GetStockHistoryCloseByDateArr': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStockHistoryCloseByDateArr,
                    request_deserializer=sinopac__forwarder__pb2.StockNumArrWithDateArr.FromString,
                    response_serializer=sinopac__forwarder__pb2.StockHistoryCloseResponse.SerializeToString,
            ),
            'GetStockTSEHistoryTick': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStockTSEHistoryTick,
                    request_deserializer=sinopac__forwarder__pb2.Date.FromString,
                    response_serializer=sinopac__forwarder__pb2.StockHistoryTickResponse.SerializeToString,
            ),
            'GetStockTSEHistoryKbar': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStockTSEHistoryKbar,
                    request_deserializer=sinopac__forwarder__pb2.Date.FromString,
                    response_serializer=sinopac__forwarder__pb2.StockHistoryKbarResponse.SerializeToString,
            ),
            'GetStockTSEHistoryClose': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStockTSEHistoryClose,
                    request_deserializer=sinopac__forwarder__pb2.Date.FromString,
                    response_serializer=sinopac__forwarder__pb2.StockHistoryCloseResponse.SerializeToString,
            ),
            'GetStockVolumeRank': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStockVolumeRank,
                    request_deserializer=sinopac__forwarder__pb2.VolumeRankRequest.FromString,
                    response_serializer=sinopac__forwarder__pb2.StockVolumeRankResponse.SerializeToString,
            ),
            'SubscribeStockTick': grpc.unary_unary_rpc_method_handler(
                    servicer.SubscribeStockTick,
                    request_deserializer=sinopac__forwarder__pb2.StockNumArr.FromString,
                    response_serializer=sinopac__forwarder__pb2.SubscribeResponse.SerializeToString,
            ),
            'UnSubscribeStockTick': grpc.unary_unary_rpc_method_handler(
                    servicer.UnSubscribeStockTick,
                    request_deserializer=sinopac__forwarder__pb2.StockNumArr.FromString,
                    response_serializer=sinopac__forwarder__pb2.SubscribeResponse.SerializeToString,
            ),
            'UnSubscribeStockAllTick': grpc.unary_unary_rpc_method_handler(
                    servicer.UnSubscribeStockAllTick,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=sinopac__forwarder__pb2.FunctionErr.SerializeToString,
            ),
            'SubscribeStockBidAsk': grpc.unary_unary_rpc_method_handler(
                    servicer.SubscribeStockBidAsk,
                    request_deserializer=sinopac__forwarder__pb2.StockNumArr.FromString,
                    response_serializer=sinopac__forwarder__pb2.SubscribeResponse.SerializeToString,
            ),
            'UnSubscribeStockBidAsk': grpc.unary_unary_rpc_method_handler(
                    servicer.UnSubscribeStockBidAsk,
                    request_deserializer=sinopac__forwarder__pb2.StockNumArr.FromString,
                    response_serializer=sinopac__forwarder__pb2.SubscribeResponse.SerializeToString,
            ),
            'UnSubscribeStockAllBidAsk': grpc.unary_unary_rpc_method_handler(
                    servicer.UnSubscribeStockAllBidAsk,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=sinopac__forwarder__pb2.FunctionErr.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sinopac_forwarder.SinopacForwarder', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SinopacForwarder(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Heartbeat(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/sinopac_forwarder.SinopacForwarder/Heartbeat',
            sinopac__forwarder__pb2.Beat.SerializeToString,
            sinopac__forwarder__pb2.Beat.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllStockDetail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sinopac_forwarder.SinopacForwarder/GetAllStockDetail',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            sinopac__forwarder__pb2.StockDetailResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllStockSnapshot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sinopac_forwarder.SinopacForwarder/GetAllStockSnapshot',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            sinopac__forwarder__pb2.StockSnapshotResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStockSnapshotByNumArr(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sinopac_forwarder.SinopacForwarder/GetStockSnapshotByNumArr',
            sinopac__forwarder__pb2.StockNumArr.SerializeToString,
            sinopac__forwarder__pb2.StockSnapshotResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStockSnapshotTSE(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sinopac_forwarder.SinopacForwarder/GetStockSnapshotTSE',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            sinopac__forwarder__pb2.StockSnapshotResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStockHistoryTick(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sinopac_forwarder.SinopacForwarder/GetStockHistoryTick',
            sinopac__forwarder__pb2.StockNumArrWithDate.SerializeToString,
            sinopac__forwarder__pb2.StockHistoryTickResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStockHistoryKbar(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sinopac_forwarder.SinopacForwarder/GetStockHistoryKbar',
            sinopac__forwarder__pb2.StockNumArrWithDate.SerializeToString,
            sinopac__forwarder__pb2.StockHistoryKbarResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStockHistoryClose(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sinopac_forwarder.SinopacForwarder/GetStockHistoryClose',
            sinopac__forwarder__pb2.StockNumArrWithDate.SerializeToString,
            sinopac__forwarder__pb2.StockHistoryCloseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStockHistoryCloseByDateArr(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sinopac_forwarder.SinopacForwarder/GetStockHistoryCloseByDateArr',
            sinopac__forwarder__pb2.StockNumArrWithDateArr.SerializeToString,
            sinopac__forwarder__pb2.StockHistoryCloseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStockTSEHistoryTick(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sinopac_forwarder.SinopacForwarder/GetStockTSEHistoryTick',
            sinopac__forwarder__pb2.Date.SerializeToString,
            sinopac__forwarder__pb2.StockHistoryTickResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStockTSEHistoryKbar(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sinopac_forwarder.SinopacForwarder/GetStockTSEHistoryKbar',
            sinopac__forwarder__pb2.Date.SerializeToString,
            sinopac__forwarder__pb2.StockHistoryKbarResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStockTSEHistoryClose(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sinopac_forwarder.SinopacForwarder/GetStockTSEHistoryClose',
            sinopac__forwarder__pb2.Date.SerializeToString,
            sinopac__forwarder__pb2.StockHistoryCloseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStockVolumeRank(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sinopac_forwarder.SinopacForwarder/GetStockVolumeRank',
            sinopac__forwarder__pb2.VolumeRankRequest.SerializeToString,
            sinopac__forwarder__pb2.StockVolumeRankResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeStockTick(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sinopac_forwarder.SinopacForwarder/SubscribeStockTick',
            sinopac__forwarder__pb2.StockNumArr.SerializeToString,
            sinopac__forwarder__pb2.SubscribeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnSubscribeStockTick(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sinopac_forwarder.SinopacForwarder/UnSubscribeStockTick',
            sinopac__forwarder__pb2.StockNumArr.SerializeToString,
            sinopac__forwarder__pb2.SubscribeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnSubscribeStockAllTick(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sinopac_forwarder.SinopacForwarder/UnSubscribeStockAllTick',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            sinopac__forwarder__pb2.FunctionErr.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeStockBidAsk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sinopac_forwarder.SinopacForwarder/SubscribeStockBidAsk',
            sinopac__forwarder__pb2.StockNumArr.SerializeToString,
            sinopac__forwarder__pb2.SubscribeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnSubscribeStockBidAsk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sinopac_forwarder.SinopacForwarder/UnSubscribeStockBidAsk',
            sinopac__forwarder__pb2.StockNumArr.SerializeToString,
            sinopac__forwarder__pb2.SubscribeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnSubscribeStockAllBidAsk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sinopac_forwarder.SinopacForwarder/UnSubscribeStockAllBidAsk',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            sinopac__forwarder__pb2.FunctionErr.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class TradeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.BuyStock = channel.unary_unary(
                '/sinopac_forwarder.TradeService/BuyStock',
                request_serializer=sinopac__forwarder__pb2.StockOrderDetail.SerializeToString,
                response_deserializer=sinopac__forwarder__pb2.TradeResult.FromString,
                )
        self.SellStock = channel.unary_unary(
                '/sinopac_forwarder.TradeService/SellStock',
                request_serializer=sinopac__forwarder__pb2.StockOrderDetail.SerializeToString,
                response_deserializer=sinopac__forwarder__pb2.TradeResult.FromString,
                )
        self.SellFirstStock = channel.unary_unary(
                '/sinopac_forwarder.TradeService/SellFirstStock',
                request_serializer=sinopac__forwarder__pb2.StockOrderDetail.SerializeToString,
                response_deserializer=sinopac__forwarder__pb2.TradeResult.FromString,
                )
        self.CancelStock = channel.unary_unary(
                '/sinopac_forwarder.TradeService/CancelStock',
                request_serializer=sinopac__forwarder__pb2.OrderID.SerializeToString,
                response_deserializer=sinopac__forwarder__pb2.TradeResult.FromString,
                )
        self.GetOrderStatusByID = channel.unary_unary(
                '/sinopac_forwarder.TradeService/GetOrderStatusByID',
                request_serializer=sinopac__forwarder__pb2.OrderID.SerializeToString,
                response_deserializer=sinopac__forwarder__pb2.TradeResult.FromString,
                )
        self.GetOrderStatusArr = channel.unary_unary(
                '/sinopac_forwarder.TradeService/GetOrderStatusArr',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=sinopac__forwarder__pb2.StockOrderStatusArr.FromString,
                )
        self.GetNonBlockOrderStatusArr = channel.unary_unary(
                '/sinopac_forwarder.TradeService/GetNonBlockOrderStatusArr',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=sinopac__forwarder__pb2.FunctionErr.FromString,
                )


class TradeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def BuyStock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SellStock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SellFirstStock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelStock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOrderStatusByID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOrderStatusArr(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNonBlockOrderStatusArr(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TradeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'BuyStock': grpc.unary_unary_rpc_method_handler(
                    servicer.BuyStock,
                    request_deserializer=sinopac__forwarder__pb2.StockOrderDetail.FromString,
                    response_serializer=sinopac__forwarder__pb2.TradeResult.SerializeToString,
            ),
            'SellStock': grpc.unary_unary_rpc_method_handler(
                    servicer.SellStock,
                    request_deserializer=sinopac__forwarder__pb2.StockOrderDetail.FromString,
                    response_serializer=sinopac__forwarder__pb2.TradeResult.SerializeToString,
            ),
            'SellFirstStock': grpc.unary_unary_rpc_method_handler(
                    servicer.SellFirstStock,
                    request_deserializer=sinopac__forwarder__pb2.StockOrderDetail.FromString,
                    response_serializer=sinopac__forwarder__pb2.TradeResult.SerializeToString,
            ),
            'CancelStock': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelStock,
                    request_deserializer=sinopac__forwarder__pb2.OrderID.FromString,
                    response_serializer=sinopac__forwarder__pb2.TradeResult.SerializeToString,
            ),
            'GetOrderStatusByID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrderStatusByID,
                    request_deserializer=sinopac__forwarder__pb2.OrderID.FromString,
                    response_serializer=sinopac__forwarder__pb2.TradeResult.SerializeToString,
            ),
            'GetOrderStatusArr': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrderStatusArr,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=sinopac__forwarder__pb2.StockOrderStatusArr.SerializeToString,
            ),
            'GetNonBlockOrderStatusArr': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNonBlockOrderStatusArr,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=sinopac__forwarder__pb2.FunctionErr.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sinopac_forwarder.TradeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TradeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def BuyStock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sinopac_forwarder.TradeService/BuyStock',
            sinopac__forwarder__pb2.StockOrderDetail.SerializeToString,
            sinopac__forwarder__pb2.TradeResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SellStock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sinopac_forwarder.TradeService/SellStock',
            sinopac__forwarder__pb2.StockOrderDetail.SerializeToString,
            sinopac__forwarder__pb2.TradeResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SellFirstStock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sinopac_forwarder.TradeService/SellFirstStock',
            sinopac__forwarder__pb2.StockOrderDetail.SerializeToString,
            sinopac__forwarder__pb2.TradeResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CancelStock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sinopac_forwarder.TradeService/CancelStock',
            sinopac__forwarder__pb2.OrderID.SerializeToString,
            sinopac__forwarder__pb2.TradeResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOrderStatusByID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sinopac_forwarder.TradeService/GetOrderStatusByID',
            sinopac__forwarder__pb2.OrderID.SerializeToString,
            sinopac__forwarder__pb2.TradeResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOrderStatusArr(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sinopac_forwarder.TradeService/GetOrderStatusArr',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            sinopac__forwarder__pb2.StockOrderStatusArr.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNonBlockOrderStatusArr(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sinopac_forwarder.TradeService/GetNonBlockOrderStatusArr',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            sinopac__forwarder__pb2.FunctionErr.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
